.TH xfs 5
.SH NAME
xfs \- layout of the XFS filesystem
.SH DESCRIPTION
An XFS filesystem can reside on a regular disk partition or on a
logical volume.
An XFS filesystem has up to three parts:
a data section, a log section, and a realtime section.
Using the default
.BR mkfs.xfs (8)
options, the realtime section is absent, and
the log area is contained within the data section.
The log section can be either separate from the data section
or contained within it.
The filesystem sections are divided into a certain number of
.IR blocks ,
whose size is specified at
.BR mkfs.xfs (8)
time with the
.B \-b
option.
.PP
The data section contains all the filesystem metadata
(inodes, directories, indirect blocks)
as well as the user file data for ordinary (non-realtime) files
and the log area if the log is
.I internal
to the data section.
The data section is divided into a number of
.IR "allocation groups" .
The number and size of the allocation groups are chosen by
.BR mkfs.xfs (8)
so that there is normally a small number of equal-sized groups.
The number of allocation groups controls the amount of parallelism
available in file and block allocation.
It should be increased from
the default if there is sufficient memory and a lot of allocation
activity.
The number of allocation groups should not be set very high,
since this can cause large amounts of CPU time to be used by
the filesystem, especially when the filesystem is nearly full.
More allocation groups are added (of the original size) when
.BR xfs_growfs (8)
is run.
.PP
The log section (or area, if it is internal to the data section)
is used to store changes to filesystem metadata while the
filesystem is running until those changes are made to the data
section.
It is written sequentially during normal operation and read only
during mount.
When mounting a filesystem after a crash, the log
is read to complete operations that were
in progress at the time of the crash.
.PP
The realtime section is used to store the data of realtime files.
These files had an attribute bit set through
.BR xfsctl (3)
after file creation, before any data was written to the file.
The realtime section is divided into a number of
.I extents
of fixed size (specified at
.BR mkfs.xfs (8)
time).
Each file in the realtime section has an extent size that
is a multiple of the realtime section extent size.
.PP
Each allocation group contains several data structures.
The first sector contains the superblock.
For allocation groups after the first,
the superblock is just a copy and is not updated after
.BR mkfs.xfs (8).
The next three sectors contain information for block and inode
allocation within the allocation group.
Also contained within each allocation group are data structures
to locate free blocks and inodes;
these are located through the header structures.
.PP
Each XFS filesystem is labeled with a Universal Unique
Identifier (UUID).
The UUID is stored in every allocation group header and
is used to help distinguish one XFS filesystem from another,
therefore you should avoid using
.BR dd (1)
or other block-by-block copying programs to copy XFS filesystems.
If two XFS filesystems on the same machine have the same UUID,
.BR xfsdump (8)
may become confused when doing incremental and resumed dumps.
.BR xfsdump (8)
and
.BR xfsrestore (8)
are recommended for making copies of XFS filesystems.
.SH OPERATIONS
Some functionality specific to the XFS filesystem is accessible to
applications through the
.BR xfsctl (3)
and by-handle (see
.BR open_by_handle (3))
interfaces.
.SH MOUNT OPTIONS
.TP
.BI allocsize= size
Sets the buffered I/O end-of-file preallocation size when
doing delayed allocation writeout (default size is 64KiB).
Valid values for this option are page size (typically 4KiB)
through to 1GiB, inclusive, in power-of-2 increments.
.TP
.BR attr2 | noattr2
The options enable/disable (default is enabled) an "opportunistic"
improvement to be made in the way inline extended attributes are
stored on-disk.
When the new form is used for the first time (by setting or
removing extended attributes) the on-disk superblock feature
bit field will be updated to reflect this format being in use.
.TP
.B barrier | nobarrier
Enables/disables the use of block layer write barriers for writes into
the journal and for data integrity operations.
This allows for drive level write caching to be enabled, for devices that
support write barriers.
The default behaviour is to have barriers enabled.
.TP
.BR ikeep | noikeep
When inode clusters are emptied of inodes, keep them around
on the disk (ikeep) - this is the traditional XFS behaviour
and is still the default for now.  Using the noikeep option,
inode clusters are returned to the free space pool.
.TP
.B inode64
Indicates that XFS is allowed to create inodes at any location
in the filesystem, including those which will result in inode
numbers occupying more than 32 bits of significance.  This is
provided for backwards compatibility, but causes problems for
backup applications that cannot handle large inode numbers.
.TP
.BR largeio | nolargeio
If
.B nolargeio
is specified, the optimal I/O reported in
st_blksize by
.BR stat (2)
will be as small as possible to allow user
applications to avoid inefficient read/modify/write I/O.
If
.B largeio
is specified, a filesystem that has a
.B swidth
specified
will return the
.B swidth
value (in bytes) in st_blksize. If the
filesystem does not have a
.B swidth
specified but does specify
an
.B allocsize
then
.B allocsize
(in bytes) will be returned
instead.
If neither of these two options are specified, then filesystem
will behave as if
.B nolargeio
was specified.
.TP
.BI logbufs= value
Set the number of in-memory log buffers.  Valid numbers range
from 2-8 inclusive.
The default value is 8 buffers for any recent kernel.
.TP
.BI logbsize= value
Set the size of each in-memory log buffer.
Size may be specified in bytes, or in kilobytes with a "k" suffix.
Valid sizes for version 1 and version 2 logs are 16384 (16k) and
32768 (32k).  Valid sizes for version 2 logs also include
65536 (64k), 131072 (128k) and 262144 (256k).
The default value for any recent kernel is 32768.
.TP
\fBlogdev=\fP\fIdevice\fP and \fBrtdev=\fP\fIdevice\fP
Use an external log (metadata journal) and/or real-time device.
An XFS filesystem has up to three parts: a data section, a log section,
and a real-time section.
The real-time section is optional, and the log section can be separate
from the data section or contained within it.
Refer to
.BR xfs (5).
.TP
.BI  mtpt= mountpoint
Use with the
.B dmapi
option. The value specified here will be
included in the DMAPI mount event, and should be the path of
the actual mountpoint that is used.
.TP
.B noalign
Data allocations will not be aligned at stripe unit boundaries.
.TP
.B noatime
Access timestamps are not updated when a file is read.
.TP
.B norecovery
The filesystem will be mounted without running log recovery.
If the filesystem was not cleanly unmounted, it is likely to
be inconsistent when mounted in
.B norecovery
mode.
Some files or directories may not be accessible because of this.
Filesystems mounted
.B norecovery
must be mounted read-only or the mount will fail.
.TP
.B nouuid
Don't check for double mounted filesystems using the filesystem uuid.
This is useful to mount LVM snapshot volumes.
.TP
.B osyncisosync
Make O_SYNC writes implement true O_SYNC.  WITHOUT this option,
Linux XFS behaves as if an
.B osyncisdsync
option is used,
which will make writes to files opened with the O_SYNC flag set
behave as if the O_DSYNC flag had been used instead.
This can result in better performance without compromising
data safety.
However if this option is not in effect, timestamp updates from
O_SYNC writes can be lost if the system crashes.
If timestamp updates are critical, use the
.B osyncisosync
option.
.TP
.BR uquota | usrquota | uqnoenforce | quota
User disk quota accounting enabled, and limits (optionally)
enforced.  Refer to
.BR xfs_quota (8)
for further details.
.TP
.BR gquota | grpquota | gqnoenforce
Group disk quota accounting enabled and limits (optionally)
enforced. Refer to
.BR xfs_quota (8)
for further details.
.TP
.BR pquota | prjquota | pqnoenforce
Project disk quota accounting enabled and limits (optionally)
enforced. Refer to
.BR xfs_quota (8)
for further details.
.TP
\fBsunit=\fP\fIvalue\fP and \fBswidth=\fP\fIvalue\fP
Used to specify the stripe unit and width for a RAID device or a stripe
volume.
.I value
must be specified in 512-byte block units.
If this option is not specified and the filesystem was made on a stripe
volume or the stripe width or unit were specified for the RAID device at
mkfs time, then the mount system call will restore the value from the
superblock.
For filesystems that are made directly on RAID devices, these options can be
used to override the information in the superblock if the underlying disk
layout changes after the filesystem has been created.
The
.B swidth
option is required if the
.B sunit
option has been specified,
and must be a multiple of the
.B sunit
value.
.TP
.B swalloc
Data allocations will be rounded up to stripe width boundaries
when the current end of file is being extended and the file
size is larger than the stripe width size.
.TP
.B dmapi
Enable the DMAPI (Data Management API) event callouts.
Use with the
.B mtpt
option.
.TP
.BR grpid | bsdgroups " and " nogrpid | sysvgroups
These options define what group ID a newly created file gets.
When grpid is set, it takes the group ID of the directory in
which it is created; otherwise (the default) it takes the fsgid
of the current process, unless the directory has the setgid bit
set, in which case it takes the gid from the parent directory,
and also gets the setgid bit set if it is a directory itself.
.TP
.BI ihashsize= value
Sets the number of hash buckets available for hashing the
in-memory inodes of the specified mount point.  If a value
of zero is used, the value selected by the default algorithm
will be displayed in
.IR /proc/mounts .
.SH SEE ALSO
.BR xfsctl (3),
.BR mount (8),
.BR mkfs.xfs (8),
.BR xfs_info (8),
.BR xfs_admin (8),
.BR xfsdump (8),
.BR xfsrestore (8).
